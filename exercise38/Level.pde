class Level {
  int currentLevel = 1;
  boolean generateLevel = false;
  HashMap<Integer, int[][]> tilesLayouts = new HashMap<Integer, int[][]>();
  HashMap<Integer, PImage> images = new HashMap<Integer, PImage>();
  HashMap<Integer, int[]> monsterList = new HashMap<Integer, int[]>();
  HashMap<Integer, int[]> gateList = new HashMap<Integer, int[]>();
  HashMap<Integer, int[]> itemList = new HashMap<Integer, int[]>();
  HashMap<Integer, int[]> playerSpawnList = new HashMap<Integer, int[]>();
  ArrayList<Monster> monsters = new ArrayList<Monster>();
  ArrayList<Item> items = new ArrayList<Item>();
  ArrayList<Gate> gates = new ArrayList<Gate>();
  ArrayList<Projectile> projList = new ArrayList<Projectile>();
  boolean endGame = false;
  int clearTiles;
  Exit exit;

  Level() {
    tilesLayouts.put(1, new int[][]{
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
      {0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 30, 0}, 
      {0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0}, 
      {0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0}, 
      {0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0}, 
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}
      });

    tilesLayouts.put(2, new int[][]{
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
      {1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 30, 1}, 
      {1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 1}, 
      {1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 1}, 
      {1, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 1}, 
      {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}

      });

    tilesLayouts.put(3, new int[][]{
      {32, 32, 32, 32, 32, 32, 32, 2, 2, 2, 2, 2, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {2, 2, 2, 2, 2, 2, 2, 2, 16, 16, 16, 16, 2, 2, 2, 2, 2, 2, 2, 2}, 
      {2, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 30, 2}, 
      {2, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2}, 
      {2, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2}, 
      {2, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 2}, 
      {2, 2, 2, 2, 2, 2, 2, 2, 16, 16, 16, 16, 2, 2, 2, 2, 2, 2, 2, 2}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 16, 16, 16, 16, 2, 32, 32, 32, 32, 32, 32, 32}, 
      {32, 32, 32, 32, 32, 32, 32, 2, 2, 2, 2, 2, 2, 32, 32, 32, 32, 32, 32, 32}

      });

    tilesLayouts.put(4, new int[][]{
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 30, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 17, 17, 17, 17, 17, 3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 3, 32}, 
      {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32}
      });

    tilesLayouts.put(5, new int[][]{
      {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}, 
      {4, 30, 18, 4, 18, 18, 18, 4, 18, 18, 18, 4, 18, 18, 18, 4, 18, 18, 18, 4}, 
      {4, 18, 18, 4, 18, 18, 18, 4, 18, 18, 18, 4, 18, 18, 18, 4, 18, 18, 18, 4}, 
      {4, 18, 18, 4, 18, 18, 18, 4, 18, 18, 18, 4, 18, 18, 18, 4, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 18, 18, 18, 4, 4, 4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 4, 4, 4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4, 4, 4, 4}, 
      {4, 4, 4, 4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4, 4, 4, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4, 4, 4, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 18, 18, 18, 4, 4, 4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 4, 4, 4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4, 4, 4, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4, 4, 4, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 18, 18, 18, 4, 4, 4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 4, 4, 4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 4, 4, 4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4}, 
      {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}
      });

    tilesLayouts.put(6, new int[][]{
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5}, 
      {5, 30, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 19, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 19, 19, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 19, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 19, 19, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 19, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 5}, 
      {5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5}
      });

    tilesLayouts.put(7, new int[][]{
      {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}, 
      {6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 30, 6}, 
      {6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 20, 20, 20, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}, 
      {6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 6, 6, 6, 6, 6, 6, 6, 20, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 20, 20, 20, 20, 20, 20, 6, 20, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 20, 20, 20, 20, 20, 20, 6, 20, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 20, 20, 20, 20, 20, 20, 6, 20, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 20, 20, 6, 20, 20, 20, 6, 20, 20, 20, 6, 6, 6, 6, 6, 20, 20, 20, 6}, 
      {6, 20, 20, 6, 20, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, 6, 20, 20, 20, 6}, 
      {6, 20, 20, 6, 20, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, 6, 20, 20, 20, 6}, 
      {6, 20, 20, 6, 20, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, 6, 20, 20, 20, 6}, 
      {6, 20, 20, 6, 20, 20, 20, 6, 6, 6, 6, 6, 20, 20, 20, 6, 20, 20, 20, 6}, 
      {6, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 20, 20, 6, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 6}, 
      {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}
      });

    tilesLayouts.put(8, new int[][]{
      {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}, 
      {7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 7, 30, 21, 7, 21, 21, 21, 21, 7, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 7, 21, 21, 7, 21, 21, 21, 21, 7, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 7, 21, 21, 7, 21, 21, 21, 21, 7, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7}, 
      {7, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 7}, 
      {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}
      });

    tilesLayouts.put(9, new int[][]{
      {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 8}, 
      {8, 22, 22, 8, 22, 22, 8, 22, 22, 8, 8, 22, 22, 22, 22, 22, 22, 8, 8, 8}, 
      {8, 8, 8, 8, 22, 22, 8, 22, 22, 22, 8, 8, 22, 22, 22, 22, 22, 22, 22, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 22, 22, 22, 22, 8, 8, 22, 22, 22, 22, 22, 22, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 22, 22, 22, 22, 22, 8, 22, 22, 8, 8, 22, 22, 8}, 
      {8, 8, 8, 22, 22, 8, 8, 22, 22, 22, 22, 22, 8, 22, 22, 8, 22, 22, 22, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 22, 22, 22, 22, 22, 8, 22, 22, 8, 22, 22, 22, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 22, 22, 22, 22, 22, 8, 22, 22, 8, 22, 22, 8, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 22, 22, 22, 22, 22, 8, 22, 22, 8, 22, 22, 22, 8}, 
      {8, 8, 22, 22, 8, 8, 8, 22, 22, 22, 22, 22, 8, 22, 22, 8, 22, 22, 22, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 22, 22, 22, 22, 22, 8, 22, 22, 8, 8, 22, 22, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 22, 22, 22, 22, 22, 8, 22, 22, 8, 22, 22, 22, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 22, 22, 22, 22, 22, 8, 22, 22, 8, 22, 22, 22, 8}, 
      {8, 8, 8, 22, 22, 8, 8, 22, 22, 22, 22, 22, 8, 22, 22, 8, 22, 22, 8, 8}, 
      {8, 22, 22, 22, 22, 22, 8, 8, 8, 8, 8, 8, 8, 22, 22, 8, 22, 22, 22, 8}, 
      {8, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 8, 22, 22, 22, 8}, 
      {8, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 8, 8, 22, 30, 8}, 
      {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8}
      });

    tilesLayouts.put(10, new int[][]{
      {9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 9, 23, 23, 23, 23, 23, 23, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 9}, 
      {9, 23, 23, 23, 23, 23, 9, 23, 23, 9, 23, 23, 9, 9, 9, 9, 9, 23, 23, 9}, 
      {9, 23, 23, 23, 23, 23, 9, 23, 23, 9, 23, 23, 9, 23, 23, 23, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 9, 23, 23, 9, 23, 23, 23, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 23, 23, 23, 9, 23, 23, 9, 9, 23, 23, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 23, 23, 23, 9, 23, 23, 23, 23, 23, 23, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 9, 23, 23, 23, 23, 23, 23, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 9, 9, 9, 9, 9, 9, 9, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 9, 23, 23, 23, 23, 23, 23, 9, 9, 9, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 9, 23, 23, 23, 23, 23, 23, 9, 23, 30, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 9, 23, 23, 9, 9, 23, 23, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 23, 23, 23, 23, 9, 23, 23, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 23, 23, 23, 23, 23, 23, 9, 23, 23, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 9, 9, 9, 9, 9, 9, 9, 9, 23, 23, 9, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 23, 23, 23, 9, 23, 23, 23, 23, 23, 23, 23, 23, 23, 9}, 
      {9, 23, 23, 9, 23, 23, 23, 23, 23, 9, 23, 23, 23, 23, 23, 23, 23, 23, 23, 9}, 
      {9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9}
      });

    tilesLayouts.put(11, new int[][]{
      {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}, 
      {10, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 30, 10}, 
      {10, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 10}, 
      {10, 24, 24, 24, 24, 10, 10, 10, 10, 24, 24, 10, 10, 10, 10, 24, 24, 24, 24, 10}, 
      {10, 24, 24, 24, 24, 24, 10, 10, 10, 24, 24, 10, 10, 10, 24, 24, 24, 24, 24, 10}, 
      {10, 24, 24, 10, 24, 24, 24, 10, 10, 24, 24, 10, 10, 24, 24, 24, 10, 24, 24, 10}, 
      {10, 24, 24, 10, 10, 24, 24, 24, 10, 24, 24, 10, 24, 24, 24, 10, 10, 24, 24, 10}, 
      {10, 24, 24, 10, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 10, 24, 24, 10}, 
      {10, 24, 24, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 24, 24, 10}, 
      {10, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 10}, 
      {10, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 10}, 
      {10, 24, 24, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 24, 24, 10}, 
      {10, 24, 24, 10, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 10, 24, 24, 10}, 
      {10, 24, 24, 10, 10, 24, 24, 24, 10, 24, 24, 10, 24, 24, 24, 10, 10, 24, 24, 10}, 
      {10, 24, 24, 10, 24, 24, 24, 10, 10, 24, 24, 10, 10, 24, 24, 24, 10, 24, 24, 10}, 
      {10, 24, 24, 24, 24, 24, 10, 10, 10, 24, 24, 10, 10, 10, 24, 24, 24, 24, 24, 10}, 
      {10, 24, 24, 24, 24, 10, 10, 10, 10, 24, 24, 10, 10, 10, 10, 24, 24, 24, 24, 10}, 
      {10, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 10}, 
      {10, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 10}, 
      {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}
      });

    tilesLayouts.put(12, new int[][]{
      {11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}, 
      {11, 30, 25, 11, 25, 25, 25, 25, 25, 11, 25, 25, 11, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 11, 25, 25, 25, 25, 25, 11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 11, 25, 25, 11, 25, 25, 11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 11, 25, 25, 11, 25, 25, 11, 11, 11, 11, 11, 11, 11, 11, 25, 25, 11}, 
      {11, 25, 25, 11, 25, 25, 11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 11, 25, 25, 11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 11, 25, 25, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}, 
      {11, 25, 25, 11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 25, 25, 11}, 
      {11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 11, 25, 25, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}, 
      {11, 25, 25, 11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 25, 25, 11}, 
      {11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 11}, 
      {11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}
      });

    tilesLayouts.put(13, new int[][]{
      {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12}, 
      {12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 12, 12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 12, 12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 26, 26, 12, 26, 26, 12}, 
      {12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12, 26, 26, 26, 12}, 
      {12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 12, 12, 12, 12, 12, 26, 26, 26, 26, 26, 12, 26, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12, 26, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 12, 12, 12, 12, 12, 12, 12, 26, 26, 12, 26, 26, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 26, 26, 26, 26, 12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 26, 26, 26, 26, 12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 26, 26, 12, 26, 26, 26, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 26, 26, 12}, 
      {12, 26, 26, 12, 26, 26, 26, 26, 26, 26, 12, 26, 26, 26, 26, 26, 12, 26, 26, 12}, 
      {12, 26, 26, 12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12}, 
      {12, 30, 26, 12, 26, 26, 26, 12, 26, 26, 26, 26, 26, 12, 26, 26, 26, 26, 26, 12}, 
      {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12}
      });

    tilesLayouts.put(14, new int[][]{
      {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13}, 
      {13, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13}, 
      {13, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13}, 
      {13, 27, 27, 13, 13, 13, 13, 13, 13, 27, 27, 13, 13, 13, 13, 13, 13, 27, 27, 13}, 
      {13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13}, 
      {13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13}, 
      {13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13}, 
      {13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13}, 
      {13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13}, 
      {13, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13}, 
      {13, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13}, 
      {13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13, 13, 13, 13, 13, 13, 27, 27, 13}, 
      {13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13, 27, 27, 27, 30, 13, 27, 27, 13}, 
      {13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13}, 
      {13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13}, 
      {13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13}, 
      {13, 27, 27, 13, 13, 13, 13, 13, 13, 27, 27, 13, 27, 27, 27, 27, 13, 27, 27, 13}, 
      {13, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13}, 
      {13, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13}, 
      {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13}
      });

    tilesLayouts.put(15, new int[][]{
      {14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14}, 
      {14, 28, 28, 28, 28, 28, 14, 28, 28, 28, 28, 28, 28, 14, 28, 28, 14, 28, 28, 14}, 
      {14, 28, 28, 28, 28, 28, 28, 14, 28, 28, 28, 28, 28, 14, 28, 28, 14, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 28, 28, 28, 14, 28, 28, 28, 28, 14, 28, 28, 14, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 28, 28, 28, 28, 14, 28, 28, 28, 14, 28, 28, 14, 28, 28, 14}, 
      {14, 28, 28, 14, 14, 14, 14, 28, 28, 28, 14, 28, 28, 14, 14, 14, 14, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 28, 14, 28, 28, 28, 28, 28, 28, 28, 28, 14, 28, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 14, 28, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 28, 28, 28, 28, 28, 28, 14, 28, 28, 28, 14, 28, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 28, 14, 28, 28, 14, 14, 14, 14, 28, 28, 14, 28, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 28, 14, 28, 28, 14, 28, 28, 28, 28, 28, 14, 28, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 28, 14, 28, 14, 28, 28, 28, 28, 28, 28, 14, 28, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 28, 14, 14, 28, 28, 28, 14, 28, 28, 28, 28, 28, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 28, 14, 28, 28, 28, 28, 14, 28, 28, 28, 28, 28, 28, 28, 14}, 
      {14, 28, 28, 14, 28, 14, 28, 28, 28, 28, 28, 14, 28, 28, 28, 28, 14, 14, 14, 14}, 
      {14, 28, 28, 14, 14, 28, 28, 28, 28, 28, 28, 14, 28, 28, 28, 28, 14, 28, 30, 14}, 
      {14, 28, 28, 14, 28, 28, 28, 14, 14, 14, 14, 14, 14, 14, 28, 28, 14, 28, 28, 14}, 
      {14, 28, 14, 28, 28, 28, 28, 14, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 14}, 
      {14, 14, 28, 28, 28, 28, 28, 14, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 14}, 
      {14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14}
      });

    tilesLayouts.put(16, new int[][]{
      {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}, 
      {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15}, 
      {15, 29, 29, 15, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 15, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 15, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 15, 29, 29, 15, 15, 15, 15, 15, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 15, 29, 29, 15, 29, 29, 29, 15, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 15, 29, 29, 15, 31, 29, 29, 15, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 15, 29, 29, 15, 15, 29, 29, 15, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 15, 29, 29, 29, 29, 29, 29, 15, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 15, 29, 29, 29, 29, 29, 29, 15, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 15, 15, 15, 15, 15, 15, 15, 15, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15, 29, 29, 15}, 
      {15, 29, 29, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 29, 29, 15}, 
      {15, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15}, 
      {15, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15}, 
      {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15}
      });

    //tilesLayouts.put(17, new int[][]{
    //  {9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 32}, 
    //  {9, 16, 9, 16, 16, 16, 9, 16, 16, 16, 9, 16, 16, 16, 9, 16, 16, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 16, 9, 32}, 
    //  {9, 16, 16, 16, 9, 16, 16, 16, 9, 16, 16, 16, 9, 16, 16, 16, 9, 31, 9, 32}, 
    //  {9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 32}
    //  });

    initialiseImages();
    initialisePlayerSpawnList();
    initialiseMonsterList();
    initialiseGateList();
    initialiseItemList();
  }

  void update() {
    if (!gameOver) {
      drawLevel();
      if (!generateLevel) {
        generateMonster();
        generateGate();
        generateItem();
        generateLevel = true;
      }
      drawObjects();
      level.checkCollision();
      moveMonster();
      moveObjects();
      if (player1 != null) player1.updateMovement();
      if (player2 != null) player2.updateMovement();
      if (player3 != null) player3.updateMovement();
      if (player4 != null) player4.updateMovement();
    }
  }

  void initialiseImages() {
    //load all images
    for (int i=0; i<=32; i++) { //total images - 1
      String str = i + ".png";
      images.put(i, loadImage(str));
    }
  }

  void initialisePlayerSpawnList() {
    playerSpawnList.put(1, new int[]{1, 11}); 
    playerSpawnList.put(2, new int[]{1, 11}); 
    playerSpawnList.put(3, new int[]{1, 11}); 
    playerSpawnList.put(4, new int[]{1, 18}); 
    playerSpawnList.put(5, new int[]{1, 18});
    playerSpawnList.put(6, new int[]{1, 18});
    playerSpawnList.put(7, new int[]{1, 18});
    playerSpawnList.put(8, new int[]{1, 11});
    playerSpawnList.put(9, new int[]{1, 3});
    playerSpawnList.put(10, new int[]{1, 18});
    playerSpawnList.put(11, new int[]{9, 9});
    playerSpawnList.put(12, new int[]{18, 1});
    playerSpawnList.put(13, new int[]{18, 1});
    playerSpawnList.put(14, new int[]{1, 1});
    playerSpawnList.put(15, new int[]{1, 1});
    playerSpawnList.put(16, new int[]{1, 2});
    playerSpawnList.put(17, new int[]{1, 1}); //gameover screen to prevent bug
  }

  void initialiseMonsterList() {
    monsterList.put(2, new int[]{4, 17, 8, 4, 17, 9, 4, 17, 10, 4, 17, 11});
    monsterList.put(3, new int[]{
      4, 8, 1, 4, 9, 1, 4, 10, 1, 4, 11, 1, 
      4, 8, 2, 4, 9, 2, 4, 10, 2, 4, 11, 2, 
      4, 8, 3, 4, 9, 3, 4, 10, 3, 4, 11, 3, 
      4, 8, 4, 4, 9, 4, 4, 10, 4, 4, 11, 4, 
      4, 8, 5, 4, 9, 5, 4, 10, 5, 4, 11, 5, 
      4, 8, 6, 4, 9, 6, 4, 10, 6, 4, 11, 6});
    //monsterList.put(4, new int[]{7, 17, 8}); monster that shoot projectile
  }

  void initialiseGateList() {
    gateList.put(2, new int[]{14, 8, 14, 9, 14, 10, 14, 11});
    gateList.put(3, new int[]{8, 7, 9, 7, 10, 7, 11, 7});
  }

  void initialiseItemList() {
    itemList.put(2, new int[]{0, 11, 9});
    itemList.put(3, new int[]{0, 11, 18});
    //itemList.put(4, new int[]{1, 11, 9}); potion type
  }

  void generateItem() {
    int[] coordsOfItem = itemList.get(currentLevel);
    if (coordsOfItem != null) {
      for (int i=0; i<coordsOfItem.length; i+=3) {
        items.add(new Item(coordsOfItem[i], coordsOfItem[i+1] * tileSize, coordsOfItem[i+2] * tileSize));
      }
    }
  }

  void generateGate() {
    int[] coordsOfGate = gateList.get(currentLevel);
    if (coordsOfGate != null) {
      int[][] tiles = tilesLayouts.get(currentLevel);
      for (int i=0; i<coordsOfGate.length; i+=2) {
        gates.add(new Gate(coordsOfGate[i] * tileSize, coordsOfGate[i+1] * tileSize));
        clearTiles = tiles[coordsOfGate[i+1]][coordsOfGate[i]];
        tiles[coordsOfGate[i+1]][coordsOfGate[i]] = currentLevel-1;
      }
      tilesLayouts.put(currentLevel, tiles);
    }
  }

  void generateMonster() {
    int[] coordsOfMonster = monsterList.get(currentLevel);
    if (coordsOfMonster != null) {
      for (int i=0; i<coordsOfMonster.length; i+=3) {
        monsters.add(new Monster(coordsOfMonster[i], new PVector(coordsOfMonster[i+1] * tileSize + tileSize/2, coordsOfMonster[i+2] * tileSize + tileSize/2)));
      }
    }
  }

  void drawObjects() {
    for (int i=monsters.size()-1; i>=0; i--) {
      Monster monster = monsters.get(i);
      monster.drawObj();
    }

    for (int i=items.size()-1; i>=0; i--) {
      Item item = items.get(i);
      item.drawObj();
    }

    for (int i=gates.size()-1; i>=0; i--) {
      Gate gate = gates.get(i);
      gate.drawObj();
    }
  }

  void moveObjects() {
    for (int i=projList.size()-1; i>=0; i--) {
      Projectile proj = projList.get(i);
      int projectileSpeed = proj.getProjectileSpeed();
      if (tilesLayouts.get(currentLevel)[(int)proj.getPosY()/32][(int)proj.getPosX()/32] <= 15) {
        projList.remove(proj);
      } else if (proj.getProjectileType() == 7) {
        if (player1 != null && (proj.getPosX() + proj.getProjectileDiameter()) >= (player1.getPosX()) && (proj.getPosX()) <= (player1.getPosX() + tileSize) && (proj.getPosY() + proj.getProjectileDiameter()) >= (player1.getPosY()) && (proj.getPosY()) <= (player1.getPosY() + tileSize)) {
          player1.getHit(proj.getProjectileDamage());
          projList.remove(proj);
        }
        if (player2 != null &&(proj.getPosX() + proj.getProjectileDiameter()) >= (player2.getPosX()) && (proj.getPosX()) <= (player2.getPosX() + tileSize) && (proj.getPosY() + proj.getProjectileDiameter()) >= (player2.getPosY()) && (proj.getPosY()) <= (player2.getPosY() + tileSize)) {
          player2.getHit(proj.getProjectileDamage());
          projList.remove(proj);
        }
        if (player3 != null &&(proj.getPosX() + proj.getProjectileDiameter()) >= (player3.getPosX()) && (proj.getPosX()) <= (player3.getPosX() + tileSize) && (proj.getPosY() + proj.getProjectileDiameter()) >= (player3.getPosY()) && (proj.getPosY()) <= (player3.getPosY() + tileSize)) {
          player3.getHit(proj.getProjectileDamage());
          projList.remove(proj);
        }
        if (player4 != null &&(proj.getPosX() + proj.getProjectileDiameter()) >= (player4.getPosX()) && (proj.getPosX()) <= (player4.getPosX() + tileSize) && (proj.getPosY() + proj.getProjectileDiameter()) >= (player4.getPosY()) && (proj.getPosY()) <= (player4.getPosY() + tileSize)) {
          player4.getHit(proj.getProjectileDamage());
          projList.remove(proj);
        }
      } else if (monsters.size() != 0) { 
        for (int j=monsters.size()-1; j>=0; j--) {
          Monster monster = monsters.get(j);
          if ((proj.getPosX() + tileSize) >= (monster.getPosX()) && (proj.getPosX()) <= (monster.getPosX() + tileSize) && (proj.getPosY() + tileSize) >= (monster.getPosY()) && (proj.getPosY()) <= (monster.getPosY() + tileSize)) {
            projList.remove(proj);
            monster.getHit(proj.getProjectileDamage());
            if (monster.getHP() <= 0) {
              monsters.remove(monster);
              switch(proj.getFromPlayerID()) {
              case 1:
                player1.addScore(10);
                break;
              case 2:
                player2.addScore(10);
                break;
              case 3:
                player3.addScore(10);
                break;
              case 4:
                player4.addScore(10);
                break;
              }
            }
            break;
          }
        }
      } 
      switch(proj.getDirection()) {
      case 0:
        proj.decPosY(projectileSpeed);
        break;
      case 1:
        proj.incPosX(projectileSpeed);
        proj.decPosY(projectileSpeed);
        break;
      case 2:
        proj.incPosX(projectileSpeed);
        break;
      case 3:
        proj.incPosX(projectileSpeed);
        proj.incPosY(projectileSpeed);
        break;
      case 4:
        proj.incPosY(projectileSpeed);
        break;
      case 5:
        proj.decPosX(projectileSpeed);
        proj.incPosY(projectileSpeed);
        break;
      case 6:
        proj.decPosX(projectileSpeed);
        break;
      case 7:
        proj.decPosX(projectileSpeed);
        proj.decPosY(projectileSpeed);
        break;
      }
      proj.updateOb();
    }
  }

  void moveMonster() {
    float currentLowest = Float.MAX_VALUE;
    float p2Dist = Float.MAX_VALUE;
    float p3Dist = Float.MAX_VALUE;
    float p4Dist = Float.MAX_VALUE;
    int currentLowestPlayer = 1;
    for (Monster monster : monsters) {
      if (player1 != null && (monster.getPosX() + monster.getDiameter()) >= (player1.getPosX()) && (monster.getPosX()) <= (player1.getPosX() + tileSize) && (monster.getPosY() + monster.getDiameter()) >= (player1.getPosY()) && (monster.getPosY()) <= (player1.getPosY() + tileSize)) {
        player1.getHit(monster.getCollisionDamage());
        player1.addScore(10);
        monsters.remove(monster);
        break;
      }
      if (player2 != null && (monster.getPosX() + monster.getDiameter()) >= (player2.getPosX()) && (monster.getPosX()) <= (player2.getPosX() + tileSize) && (monster.getPosY() + monster.getDiameter()) >= (player2.getPosY()) && (monster.getPosY()) <= (player2.getPosY() + tileSize)) {
        player2.getHit(monster.getCollisionDamage());
        player2.addScore(10);
        monsters.remove(monster);
        break;
      }
      if (player3 != null && (monster.getPosX() + monster.getDiameter()) >= (player3.getPosX()) && (monster.getPosX()) <= (player3.getPosX() + tileSize) && (monster.getPosY() + monster.getDiameter()) >= (player3.getPosY()) && (monster.getPosY()) <= (player3.getPosY() + tileSize)) {
        player3.getHit(monster.getCollisionDamage());
        player3.addScore(10);
        monsters.remove(monster);
        break;
      }
      if (player4 != null && (monster.getPosX() + monster.getDiameter()) >= (player4.getPosX()) && (monster.getPosX()) <= (player4.getPosX() + tileSize) && (monster.getPosY() + monster.getDiameter()) >= (player4.getPosY()) && (monster.getPosY()) <= (player4.getPosY() + tileSize)) {
        player4.getHit(monster.getCollisionDamage());
        player4.addScore(10);
        monsters.remove(monster);
        break;
      }

      if (player1 != null) {
        currentLowest = dist(player1.getPosX(), player1.getPosY(), monster.getPosX(), monster.getPosY());
      }
      if (player2 != null) {
        p2Dist = dist(player2.getPosX(), player2.getPosY(), monster.getPosX(), monster.getPosY());
      }
      if (player3 != null) {
        p3Dist = dist(player3.getPosX(), player3.getPosY(), monster.getPosX(), monster.getPosY());
      }
      if (player4 != null) {
        p4Dist = dist(player4.getPosX(), player4.getPosY(), monster.getPosX(), monster.getPosY());
      }

      if (p2Dist < currentLowest) {
        currentLowest = p2Dist;
        currentLowestPlayer = 2;
      }
      if (p3Dist < currentLowest) {
        currentLowest = p3Dist;
        currentLowestPlayer = 3;
      }
      if (p4Dist < currentLowest) {
        currentLowest = p4Dist;
        currentLowestPlayer = 4;
      }

      switch(currentLowestPlayer) {
      case 1:
        if (player1 != null) {
          //Check player's position and monster's position and determine which direction the monster has to go, will always choose to go diagonal direction before attempt to move
          //in linear direction and another condition is that it must not have an unwalkable terrain (walls)
          if (((int)player1.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) && ((int)player1.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move top right
            monster.position.x += 1;
            monster.position.y -= 1;
            monster.setDirection(1);
          } else if (((int)player1.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) && ((int)player1.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move bottom right
            monster.position.x += 1;
            monster.position.y += 1;
            monster.setDirection(3);
          } else if (((int)player1.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) && ((int)player1.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move bottom left
            monster.setDirection(5);
            monster.position.x -= 1;
            monster.position.y += 1;
          } else if (((int)player1.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) && ((int)player1.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move top left
            monster.setDirection(7);
            monster.position.x -= 1;
            monster.position.y -= 1;
          } else if ((int)player1.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) {
            //if monsters can move right
            monster.position.x += 1;
            monster.setDirection(2);
          } else if ((int)player1.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) {
            //if monsters can move left
            monster.position.x -= 1;
            monster.setDirection(6);
          } else if ((int)player1.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15)) {
            //if monsters can move up
            monster.position.y += 1;
            monster.setDirection(0);
          } else if ((int)player1.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15)) {
            //if monsters can move down
            monster.position.y -= 1;
            monster.setDirection(4);
          }
          //if (((int)player1.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.position.y/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) && ((int)player1.getPosY() < monster.position.y && !(tilesLayouts.get(currentLevel)[(int)(monster.position.y-16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
          //  //if monsters can move top right
          //  monster.incPosX(60);
          //  monster.decPosY(60);
          //  monster.setLastMovementTicks();
          //  monster.setDirection(1);
          //} else if (((int)player1.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.position.y/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) && ((int)player1.getPosY() > monster.position.y && !(tilesLayouts.get(currentLevel)[(int)(monster.position.y+16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
          //  //if monsters can move bottom right
          //  monster.incPosX(60);
          //  monster.decPosY(60);
          //  monster.setLastMovementTicks();
          //  //monster.position.x += 1;
          //  //monster.position.y += 1;
          //  monster.setDirection(3);
          //} else if (((int)player1.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.position.y/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) && ((int)player1.getPosY() > monster.position.y && !(tilesLayouts.get(currentLevel)[(int)(monster.position.y+16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
          //  //if monsters can move bottom left
          //  monster.setDirection(5);
          //  monster.decPosX(60);
          //  monster.incPosY(60);
          //  monster.setLastMovementTicks();
          //} else if (((int)player1.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.position.y/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) && ((int)player1.getPosY() < monster.position.y && !(tilesLayouts.get(currentLevel)[(int)(monster.position.y-16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
          //  //if monsters can move top left
          //  monster.setDirection(7);
          //  monster.decPosX(60);
          //  monster.decPosY(60);
          //  monster.setLastMovementTicks();
          //} else if ((int)player1.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.position.y/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) {
          //  //if monsters can move right
          //  monster.incPosX(60);
          //  monster.setDirection(2);
          //  monster.setLastMovementTicks();
          //} else if ((int)player1.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.position.y/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) {
          //  //if monsters can move left
          //  monster.decPosX(60);
          //  monster.setDirection(6);
          //  monster.setLastMovementTicks();
          //} else if ((int)player1.getPosY() > monster.position.y && !(tilesLayouts.get(currentLevel)[(int)(monster.position.y+16)/32][(int)monster.getPosX()/tileSize] <= 15)) {
          //  //if monsters can move up
          //  monster.incPosY(60);
          //  monster.setDirection(0);
          //  monster.setLastMovementTicks();
          //} else if ((int)player1.getPosY() < monster.position.y && !(tilesLayouts.get(currentLevel)[(int)(monster.position.y-16)/32][(int)monster.getPosX()/tileSize] <= 15)) {
          //  //if monsters can move down
          //  monster.decPosY(60);
          //  monster.setDirection(4);
          //  monster.setLastMovementTicks();
          //}
        }
        break;
      case 2:
        if (player2 != null) {
          //Check player's position and monster's position and determine which direction the monster has to go, will always choose to go diagonal direction before attempt to move
          //in linear direction and another condition is that it must not have an unwalkable terrain (walls)
          if (((int)player2.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) && ((int)player2.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move top right
            monster.position.x += 1;
            monster.position.y -= 1;
            monster.setDirection(1);
          } else if (((int)player2.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) && ((int)player2.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move bottom right
            monster.position.x += 1;
            monster.position.y += 1;
            monster.setDirection(3);
          } else if (((int)player2.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) && ((int)player2.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move bottom left
            monster.setDirection(5);
            monster.position.x -= 1;
            monster.position.y += 1;
          } else if (((int)player2.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) && ((int)player2.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move top left
            monster.setDirection(7);
            monster.position.x -= 1;
            monster.position.y -= 1;
          } else if ((int)player2.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) {
            //if monsters can move right
            monster.position.x += 1;
            monster.setDirection(2);
          } else if ((int)player2.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) {
            //if monsters can move left
            monster.position.x -= 1;
            monster.setDirection(6);
          } else if ((int)player2.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15)) {
            //if monsters can move up
            monster.position.y += 1;
            monster.setDirection(0);
          } else if ((int)player2.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15)) {
            //if monsters can move down
            monster.position.y -= 1;
            monster.setDirection(4);
          }
        }
        break;
      case 3:
        if (player3 != null) {
          //Check player's position and monster's position and determine which direction the monster has to go, will always choose to go diagonal direction before attempt to move
          //in linear direction and another condition is that it must not have an unwalkable terrain (walls)
          if (((int)player3.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) && ((int)player3.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move top right
            monster.position.x += 1;
            monster.position.y -= 1;
            monster.setDirection(1);
          } else if (((int)player3.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) && ((int)player3.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move bottom right
            monster.position.x += 1;
            monster.position.y += 1;
            monster.setDirection(3);
          } else if (((int)player3.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) && ((int)player3.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move bottom left
            monster.setDirection(5);
            monster.position.x -= 1;
            monster.position.y += 1;
          } else if (((int)player3.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) && ((int)player3.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move top left
            monster.setDirection(7);
            monster.position.x -= 1;
            monster.position.y -= 1;
          } else if ((int)player3.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) {
            //if monsters can move right
            monster.position.x += 1;
            monster.setDirection(2);
          } else if ((int)player3.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) {
            //if monsters can move left
            monster.position.x -= 1;
            monster.setDirection(6);
          } else if ((int)player3.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15)) {
            //if monsters can move up
            monster.position.y += 1;
            monster.setDirection(0);
          } else if ((int)player3.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15)) {
            //if monsters can move down
            monster.position.y -= 1;
            monster.setDirection(4);
          }
        }
        break;
      case 4:
        if (player4 != null) {
          //Check player's position and monster's position and determine which direction the monster has to go, will always choose to go diagonal direction before attempt to move
          //in linear direction and another condition is that it must not have an unwalkable terrain (walls)
          if (((int)player4.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) && ((int)player4.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move top right
            monster.position.x += 1;
            monster.position.y -= 1;
            monster.setDirection(1);
          } else if (((int)player4.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) && ((int)player4.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move bottom right
            monster.position.x += 1;
            monster.position.y += 1;
            monster.setDirection(3);
          } else if (((int)player4.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) && ((int)player4.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move bottom left
            monster.setDirection(5);
            monster.position.x -= 1;
            monster.position.y += 1;
          } else if (((int)player4.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) && ((int)player4.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15))) {
            //if monsters can move top left
            monster.setDirection(7);
            monster.position.x -= 1;
            monster.position.y -= 1;
          } else if ((int)player4.getPosX() > monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/32][(int)(monster.getPosX()+16)/tileSize] <= 15)) {
            //if monsters can move right
            monster.position.x += 1;
            monster.setDirection(2);
          } else if ((int)player4.getPosX() < monster.getPosX() && !(tilesLayouts.get(currentLevel)[(int)monster.getPosY()/tileSize][(int)(monster.getPosX()-16)/tileSize] <= 15)) {
            //if monsters can move left
            monster.position.x -= 1;
            monster.setDirection(6);
          } else if ((int)player4.getPosY() > monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()+16)/32][(int)monster.getPosX()/tileSize] <= 15)) {
            //if monsters can move up
            monster.position.y += 1;
            monster.setDirection(0);
          } else if ((int)player4.getPosY() < monster.getPosY() && !(tilesLayouts.get(currentLevel)[(int)(monster.getPosY()-16)/32][(int)monster.getPosX()/tileSize] <= 15)) {
            //if monsters can move down
            monster.position.y -= 1;
            monster.setDirection(4);
          }
        }
        break;
      }
    }
  }

  boolean hasEnded() {
    return endGame;
  }

  void drawLevel() {
    imageMode(CORNER);
    int[][] tileLayout = tilesLayouts.get(currentLevel);
    if (tileLayout == null) {
      endGame = true;
    } else {
      for (int i=0; i<tileLayout.length; i++) { //y axis
        for (int j=0; j<tileLayout[i].length; j++) { //x axis
          if (tileLayout[i][j] == 30 ) exit = new Exit(j, i, 30);
          else if (tileLayout[i][j] == 31) exit = new Exit(j, i, 31);
          else image(images.get(tileLayout[i][j]), j * tileSize, i * tileSize);
        }
      }
    }
  }

  void checkCollision() {
    if (exit != null) {
      if (player1 != null && player1.getPosX() >= exit.getPosX() && player1.getPosX() <= exit.getPosX() + exit.getExitWidth() && player1.getPosY() >= exit.getPosY() && player1.getPosY() <= exit.getPosY() + exit.getExitHeight()) {
        nextLevel();
      }
      if (player2 != null && player2.getPosX() >= exit.getPosX() && player2.getPosX() <= exit.getPosX() + exit.getExitWidth() && player2.getPosY() >= exit.getPosY() && player2.getPosY() <= exit.getPosY() + exit.getExitHeight()) {
        nextLevel();
      }
      if (player3 != null && player3.getPosX() >= exit.getPosX() && player3.getPosX() <= exit.getPosX() + exit.getExitWidth() && player3.getPosY() >= exit.getPosY() && player3.getPosY() <= exit.getPosY() + exit.getExitHeight()) {
        nextLevel();
      }
      if (player4 != null && player4.getPosX() >= exit.getPosX() && player4.getPosX() <= exit.getPosX() + exit.getExitWidth() && player4.getPosY() >= exit.getPosY() && player4.getPosY() <= exit.getPosY() + exit.getExitHeight()) {
        nextLevel();
      }
    }

    for (int i=items.size()-1; i>=0; i--) {
      Item item = items.get(i);
      if (player1 != null && player1.getPosX() >= item.getPosX() && player1.getPosX() <= item.getPosX() + item.getItemWidth() && player1.getPosY() >= item.getPosY() && player1.getPosY() <= item.getPosY() + item.getItemHeight()) {
        if (item.type == 0) {
          unlockGate();
        } else {
          player1.pickUpItem(item.type);
          items.remove(item);
        }
      }
      if (player2 != null && player2.getPosX() >= item.getPosX() && player2.getPosX() <= item.getPosX() + item.getItemWidth() && player2.getPosY() >= item.getPosY() && player2.getPosY() <= item.getPosY() + item.getItemHeight()) {
        if (item.type == 0) {
          unlockGate();
        } else {
          player2.pickUpItem(item.type);
          items.remove(item);
        }
      }
      if (player3 != null && player3.getPosX() >= item.getPosX() && player3.getPosX() <= item.getPosX() + item.getItemWidth() && player3.getPosY() >= item.getPosY() && player3.getPosY() <= item.getPosY() + item.getItemHeight()) {
        if (item.type == 0) {
          unlockGate();
        } else {
          player3.pickUpItem(item.type);
          items.remove(item);
        }
      }
      if (player4 != null && player4.getPosX() >= item.getPosX() && player4.getPosX() <= item.getPosX() + item.getItemWidth() && player4.getPosY() >= item.getPosY() && player4.getPosY() <= item.getPosY() + item.getItemHeight()) {
        if (item.type == 0) {
          unlockGate();
        } else {
          player4.pickUpItem(item.type);
          items.remove(item);
        }
      }
    }
  }

  int[][] getCurrentTileLayout() {
    return tilesLayouts.get(currentLevel);
  }

  void unlockGate() {
    int[] coordsOfGate = gateList.get(currentLevel);
    if (coordsOfGate != null) {
      int[][] tiles = tilesLayouts.get(currentLevel);
      for (int i=0; i<coordsOfGate.length; i+=2) {
        tiles[coordsOfGate[i+1]][coordsOfGate[i]] = clearTiles;
      }
      tilesLayouts.put(currentLevel, tiles);
    }
    gates.clear();
  }

  void addProjectile(Projectile proj) {
    projList.add(proj);
  }

  void nextLevel() {
    monsters.clear();
    projList.clear();
    items.clear();
    gates.clear();
    currentLevel++;
    generateLevel = false;
    if (player1 != null) player1.resetPosition();
    if (player2 != null) player2.resetPosition();
    if (player3 != null) player3.resetPosition();
    if (player4 != null) player4.resetPosition();
  }

  PVector getSpawnLocation() {
    return new PVector(level.playerSpawnList.get(level.currentLevel)[0] * tileSize + tileSize/2, level.playerSpawnList.get(level.currentLevel)[1]*tileSize + tileSize/2);
  }

  int getLevelNo()
  {
    return currentLevel;
  }
  
  void restart() 
  { 
    currentLevel = 1; 
    endGame = false;     
  }
}